name: Basic CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  JAVA_VERSION: '21'
  NODE_VERSION: '24'

jobs:
  # Backend Tests - Simplified
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run backend tests
      run: ./gradlew clean test
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          build/reports/tests/test/
          build/test-results/test/
        retention-days: 7

  # Architecture Tests - DDD Validation
  architecture-tests:
    name: Architecture & DDD Compliance
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run architecture tests
      run: ./gradlew test --tests "*DomainDrivenDesignConstraintsTest*"
      
    - name: Upload architecture test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: architecture-test-results
        path: build/reports/tests/test/
        retention-days: 7

  # Build Backend
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [test-backend, architecture-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build backend
      run: ./gradlew build -x test
      
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: build/libs/*.jar
        retention-days: 7

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run integration tests
      env:
        SPRING_PROFILES_ACTIVE: test
      run: ./gradlew test --tests "*IntegrationTest*"
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: build/reports/tests/test/
        retention-days: 7

  # Security Scanning (Simplified)
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'OrderManagement'
        path: '.'
        format: 'HTML,JSON'
      continue-on-error: true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: reports/
        retention-days: 7

  # Summary Job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test-backend, architecture-tests, build-backend, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: CI Pipeline Summary
      run: |
        echo "üéØ CI Pipeline Summary"
        echo "====================="
        echo "Backend Tests: ${{ needs.test-backend.result }}"
        echo "Architecture Tests: ${{ needs.architecture-tests.result }}"
        echo "Backend Build: ${{ needs.build-backend.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo ""
        if [[ "${{ needs.architecture-tests.result }}" == "success" ]]; then
          echo "‚úÖ DDD Architecture constraints validated successfully!"
        else
          echo "‚ùå DDD Architecture constraints validation failed!"
        fi
        
        if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "‚úÖ Security scan completed successfully!"
        else
          echo "‚ö†Ô∏è Security scan completed with warnings (check artifacts)"
        fi