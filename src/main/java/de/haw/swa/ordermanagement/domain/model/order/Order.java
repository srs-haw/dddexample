package de.haw.swa.ordermanagement.domain.model.order;

import de.haw.swa.ordermanagement.domain.model.order.events.OrderConfirmed;
import de.haw.swa.ordermanagement.domain.model.order.events.OrderCreated;
import de.haw.swa.ordermanagement.domain.model.order.events.OrderPaid;
import de.haw.swa.ordermanagement.domain.model.order.events.OrderShipped;
import de.haw.swa.ordermanagement.domain.model.shared.AggregateRoot;
import de.haw.swa.ordermanagement.domain.model.shared.Money;
import jakarta.persistence.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@Entity
@Table(name = "orders")
public class Order extends AggregateRoot<Long> {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "customer_id", nullable = false)
    private Long customerId;
    
    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<OrderItem> items = new ArrayList<>();
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false, columnDefinition = "VARCHAR(20)")
    private OrderStatus status;
    
    @Column(name = "total_amount", nullable = false, precision = 10, scale = 2)
    private BigDecimal totalAmount;
    
    @Column(nullable = false, length = 3)
    private String currency;
    
    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;
    
    protected Order() {}
    
    public Order(Long orderId, Long customerId, List<OrderItem> items) {
        this.id = orderId;
        this.customerId = customerId;
        this.status = OrderStatus.PENDING;
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
        this.currency = "EUR";
        
        if (items.isEmpty()) {
            throw new IllegalArgumentException("Order must contain at least one item");
        }
        
        // Set up bidirectional relationship
        for (OrderItem item : items) {
            this.items.add(item);
            item.setOrder(this);
        }
        
        calculateAndSetTotalAmount();
        registerEvent(OrderCreated.create(getId(), getCustomerId()));
    }
    
    public Order(Long customerId, List<OrderItem> items) {
        // id will be auto-generated by JPA
        this.customerId = customerId;
        this.status = OrderStatus.PENDING;
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
        this.currency = "EUR";
        
        if (items.isEmpty()) {
            throw new IllegalArgumentException("Order must contain at least one item");
        }
        
        // Set up bidirectional relationship
        for (OrderItem item : items) {
            this.items.add(item);
            item.setOrder(this);
        }
        
        calculateAndSetTotalAmount();
    }
    
    /**
     * Call this method after the entity is persisted to register the creation event.
     */
    public void registerCreationEvent() {
        if (getId() != null) {
            registerEvent(OrderCreated.create(getId(), getCustomerId()));
        }
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    public Long getCustomerId() {
        return customerId;
    }
    
    public List<OrderItem> getItems() {
        return Collections.unmodifiableList(items);
    }
    
    public OrderStatus getStatus() {
        return status;
    }
    
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }
    
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    
    public Money getTotalAmount() {
        return Money.euro(totalAmount);
    }
    
    private void calculateAndSetTotalAmount() {
        this.totalAmount = items.stream()
            .map(OrderItem::getTotalPrice)
            .map(Money::getAmount)
            .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
    
    public void confirm() {
        if (status != OrderStatus.PENDING) {
            throw new IllegalStateException("Only pending orders can be confirmed");
        }
        this.status = OrderStatus.CONFIRMED;
        this.updatedAt = LocalDateTime.now();
        registerEvent(OrderConfirmed.create(getId()));
    }
    
    public void markAsPaid() {
        if (status != OrderStatus.CONFIRMED) {
            throw new IllegalStateException("Only confirmed orders can be marked as paid");
        }
        this.status = OrderStatus.PAID;
        this.updatedAt = LocalDateTime.now();
        registerEvent(OrderPaid.create(getId()));
    }
    
    public void ship() {
        if (status != OrderStatus.PAID) {
            throw new IllegalStateException("Only paid orders can be shipped");
        }
        this.status = OrderStatus.SHIPPED;
        this.updatedAt = LocalDateTime.now();
        registerEvent(OrderShipped.create(getId()));
    }
    
    public void deliver() {
        if (status != OrderStatus.SHIPPED) {
            throw new IllegalStateException("Only shipped orders can be delivered");
        }
        this.status = OrderStatus.DELIVERED;
        this.updatedAt = LocalDateTime.now();
    }
    
    public void cancel() {
        if (status == OrderStatus.DELIVERED || status == OrderStatus.SHIPPED) {
            throw new IllegalStateException("Cannot cancel delivered or shipped orders");
        }
        this.status = OrderStatus.CANCELLED;
        this.updatedAt = LocalDateTime.now();
    }
    
    public void returnOrder() {
        if (status != OrderStatus.DELIVERED) {
            throw new IllegalStateException("Only delivered orders can be returned");
        }
        this.status = OrderStatus.RETURNED;
        this.updatedAt = LocalDateTime.now();
    }
}