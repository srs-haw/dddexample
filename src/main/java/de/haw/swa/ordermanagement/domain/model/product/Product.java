package de.haw.swa.ordermanagement.domain.model.product;

import de.haw.swa.ordermanagement.domain.model.shared.AggregateRoot;
import de.haw.swa.ordermanagement.domain.model.shared.Money;
import jakarta.persistence.*;

import java.math.BigDecimal;

@Entity
@Table(name = "products")
public class Product extends AggregateRoot<Long> {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String name;
    
    private String description;
    
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal price;
    
    @Column(name = "stock_quantity", nullable = false)
    private Integer stockQuantity;
    
    protected Product() {}
    
    public Product(Long productId, String name, String description, Money price, int stockQuantity) {
        this.id = productId;
        this.name = name;
        this.description = description;
        this.price = price.getAmount();
        this.stockQuantity = stockQuantity;
    }
    
    public Product(String name, String description, Money price, int stockQuantity) {
        // id will be auto-generated by JPA
        this.name = name;
        this.description = description;
        this.price = price.getAmount();
        this.stockQuantity = stockQuantity;
    }
    
    @Override
    public Long getId() {
        return id;
    }
    
    public String getName() {
        return name;
    }
    
    public String getDescription() {
        return description;
    }
    
    public Money getPrice() {
        return Money.euro(price);
    }
    
    public int getStockQuantity() {
        return stockQuantity;
    }
    
    public boolean isAvailable(int quantity) {
        return stockQuantity >= quantity;
    }
    
    public void reduceStock(int quantity) {
        if (!isAvailable(quantity)) {
            throw new IllegalArgumentException("Insufficient stock available");
        }
        this.stockQuantity -= quantity;
    }
    
    public void increaseStock(int quantity) {
        this.stockQuantity += quantity;
    }
}